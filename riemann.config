; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init :file "riemann.log")

(require '[clj-http.client :as client] 
         '[cheshire.core :as json]
         '[riemann.query :as query])

(def version "1.0.0")
(def hostname (.getHostName (java.net.InetAddress/getLocalHost)))

(include "alerta.clj")

(tcp-server)
(udp-server)
(ws-server)
(repl-server)

(graphite-server :host "localhost"
:protocol :udp
:parser-fn (fn [{:keys [service] :as event}]
              (if-let [[env grid cluster host real-service]
                       (clojure.string/split service #"\.")]
                {:host (clojure.string/replace host #"_" ".")
                 :service real-service
                 :tags ["riemann:true" (str "environment:" env) (str "cluster:" cluster) (str "service:" grid)]}))
)

(periodically-expire 10)

(defn now
  []
  (let [now (java.util.Date.)]
    (Math/floor (/ (.getTime now) 1000))))

(let [index (default :ttl 600 (update-index (index)))]
  (streams
  	index
  	(by [:host]
  		(where* (fn [e] 
  			(let [boot-threshold (- (now) 7200)]
  				(and (= "boottime" (:service e)) (> (:metric e) boot-threshold))))
  			(with :state "informational" alerta)))
))

(defn service-is [service e] (= service (get e :service "")))

(streams
	(where* (partial service-is "heartbeat")
		(splitp < metric
			90 (with :state "critical" alerta)
			(with :state "normal" alerta))))

(defn switch-epoch-to-elapsed
	[& children]
	(fn [e] ((apply with {:metric (- (now) (:metric e))} children) e)))

(defn add-description
	[description & children]
	(fn [e] ((let [pup-errors "bob"] (apply with :description (str description ": " pup-errors) children)) e)))

(defn puppet-failed-description [e]
	(format "Puppet has not run for host %s" (:host e)))

(defn gu-transform [f & children]
	(fn [event] (let [transformed-event (f event)]
		(call-rescue transformed-event children))))

(streams
	(by [:host]
		(where* (partial service-is "pup_last_run")
			(let [last-run-threshold (- (now) 7200)
				time-elapsed (fn [e] (- (now) (:metric e)))] 
				(splitp > metric
					last-run-threshold (gu-transform (fn [e] (assoc e :state "major" :metric (time-elapsed e))) alerta)
					(gu-transform
						(fn [e] (assoc e :state "normal" :description (puppet-failed-description e) :metric (time-elapsed e)))
						alerta prn))))))

(streams
	(by [:host]
		(gu-transform (fn [e] {:hello "world"}) prn)))


(defn puppet_update_fail []
	(let [total-puppets (:metric (first (.search (:index @core) (query/ast "service=\"pup_res_total\""))))]
	{:state "warning" :description (format "Puppet agent failed to update $pup_res_failed out of %d" total-puppets)}))


(streams
	(by [:host :service]
		(where* (partial service-is "pup_res_failed")
			(split*
				(fn [e] (< 0 (:metric e))) (with (puppet_update_fail) prn)
				(with {:state "normal" :description "Puppet is updating all $pup_res_total resources"} prn)))))

(let [index (default :ttl 300 (update-index (index)))
  dedup-alert (changed-state alerta)
  normal (with :state "normal" dedup-alert)]

  (streams
    (by [:host :service]
      index
      (splitp < metric
        0.95 (with :state "critical" dedup-alert)
        0.90 (with :state "major" dedup-alert)
        0.80 (with :state "minor" dedup-alert)
        0.50 (with :state "warning" dedup-alert)
        normal))))

(streams
  (throttle 1 30 heartbeat))